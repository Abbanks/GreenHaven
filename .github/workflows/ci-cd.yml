name: GreenHaven CI/CD

on:
  push:
    branches: [ main ] 
    paths:
      - 'src/**'        
      - '*.sln'          
      - '**/*.csproj'   
  pull_request:
    branches: [ main ] 
    paths:
      - 'src/**'
      - '*.sln'
      - '**/*.csproj'

env:
  DOTNET_VERSION: '9.0.x'       
  IMAGE_NAME: greenhaven-api    
  SOLUTION_FILE: GreenHaven.sln 

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4 
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache .NET packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages 
          key: ${{ runner.os }}-nuget-${{ hashFiles(env.SOLUTION_FILE) }} 
          restore-keys: |
            ${{ runner.os }}-nuget- 

      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_FILE }}

      - name: Build solution
        run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration Release

      - name: Run tests and collect code coverage
        run: |
          dotnet test ${{ env.SOLUTION_FILE }} \
            --no-build \
            --configuration Release \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory artifacts/test-results \
            --logger "trx;LogFileName=test_results.trx"

      - name: Upload test results (TRX)
        uses: actions/upload-artifact@v4
        if: always() 
        with:
          name: test-results-trx
          path: 'artifacts/test-results/**/test_results.trx'

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Code Coverage Report
        run: |
          reportgenerator \
            "-reports:artifacts/test-results/**/coverage.cobertura.xml" \
            "-targetdir:coverage_report" \
            "-reporttypes:Html" 

      - name: Upload Code Coverage Report (HTML)
        uses: actions/upload-artifact@v4
        if: always() 
        with:
          name: code-coverage-report
          path: coverage_report/ 

  docker:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} 
          password: ${{ secrets.GITHUB_TOKEN }} 

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch 
            type=sha,prefix={{branch}}- 
            type=raw,value=latest,enable={{is_default_branch}} 

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5 
        with:
          context: . 
          file: src/GreenHaven.API/Dockerfile 
          push: true 
          tags: ${{ steps.meta.outputs.tags }} 
          labels: ${{ steps.meta.outputs.labels }} 
          cache-from: type=gha 
          cache-to: type=gha,mode=max 
          platforms: linux/amd64,linux/arm64 